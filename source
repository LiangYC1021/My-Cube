#include <easyx.h>
#include <conio.h>
#include <time.h>
#include <iostream>
using namespace std;

//定义游戏区
#define	WIDTH	17		// 游戏区宽度
#define	HEIGHT	31		// 游戏区高度
#define	UNIT	20		// 每个游戏区单位的实际像素

// 定义操作类型
enum CMD
{
	CMD_ROTATE,						// 方块旋转
	CMD_LEFT, CMD_RIGHT, CMD_DOWN,	// 方块左、右、下移动
	CMD_SINK,						// 方块沉底
	CMD_QUIT						// 退出游戏
};

// 定义绘制方块的方法
enum DRAW
{
	SHOW,	// 显示方块
	CLEAR,	// 擦除方块
	FIX		// 固定方块
};

// 定义七种俄罗斯方块
struct BLOCK
{
	WORD dir[4];	// 方块的四个旋转状态
	COLORREF color;	// 方块的颜色
};
BLOCK g_Blocks[7] = { {0x0F00, 0x4444, 0x0F00, 0x4444, RED},		// I
						{0x0660, 0x0660, 0x0660, 0x0660, BLUE},		// 口
						{0x4460, 0x02E0, 0x0622, 0x0740, MAGENTA},	// L
						{0x2260, 0x0E20, 0x0644, 0x0470, YELLOW},	// 反L
						{0x0C60, 0x2640, 0x0C60, 0x2640, CYAN},		// Z
						{0x0360, 0x4620, 0x0360, 0x4620, GREEN},	// 反Z
						{0x4E00, 0x4C40, 0x0E40, 0x4640, BROWN} };	// T

// 定义当前方块、下一个方块的信息
struct BLOCKINFO
{
	byte id;	// 方块 ID
	char x, y;	// 方块在游戏区中的坐标
	byte dir : 2;	// 方向
}g_CurBlock, g_NextBlock;

// 定义游戏区
BYTE g_World[WIDTH][HEIGHT] = { 0 };


//类声明
class Drawing {
public:
	int x, y;
	Drawing(int a, int b) {
		x = a;
		y = b;
	}
	void Init();											// 初始化游戏
	void Quit();											// 退出游戏
	void NewGame();											// 开始新游戏
	void GameOver();										// 结束游戏
};
class Player {
public:
	Player() {}
	CMD  GetCmd();											// 获取控制命令
	void DispatchCmd(CMD _cmd);								// 分发控制命令
};

class Square {
public:
	Square() {}
	void NewBlock();										// 生成新的方块
	bool CheckBlock(BLOCKINFO _block);						// 检测指定方块是否可以放下
	void DrawUnit(int x, int y, COLORREF c, DRAW _draw);	// 画单元方块
	void DrawBlock(BLOCKINFO _block, DRAW _draw = SHOW);	// 画方块
	void OnRotate();										// 旋转方块
	void OnLeft();											// 左移方块
	void OnRight();											// 右移方块
	void OnDown();											// 下移方块
	void OnSink();											// 沉底方块
};

class Game :public Player, public Drawing, public Square {
public:
	Game(int a, int b) :Drawing(a, b) {
	}
};

// 主函数
void main()
{
	Game P(210, 10), Q(510, 10);
	P.Init();

	CMD c, d;
	while (true)
	{
		c = P.GetCmd();
		P.DispatchCmd(c);
		d = Q.GetCmd();
		Q.DispatchCmd(d);
		if (c== CMD_QUIT||d==CMD_QUIT)
		{
			HWND wnd = GetHWnd();
			if (MessageBox(wnd, _T("您要退出游戏吗？"), _T("提醒"), MB_OKCANCEL | MB_ICONQUESTION) == IDOK)
				P.Quit();
		}
	}
}

// 初始化游戏
void Drawing::Init()
{
	initgraph(1200, 640);
	srand((unsigned)time(NULL));
	setbkcolor(RGB(161, 175, 201));
	cleardevice();
	//画线
	setlinecolor(RGB(61, 225, 174));
	setlinestyle(PS_SOLID, 4);
	line(200, 0, 200, 640);
	line(700, 0, 700, 640);
	setlinecolor(RGB(163, 226, 197));
	line(575, 50, 690, 50);
	line(1075, 50, 1190, 50);

	//设置界面文字
	LOGFONT f;
	gettextstyle(&f);
	f.lfHeight = 20;						// 设置字体高度为 20
	_tcscpy_s(f.lfFaceName, _T("楷体"));	// 设置字体为“楷体”
	f.lfQuality = ANTIALIASED_QUALITY;		// 设置输出效果为抗锯齿  
	settextstyle(&f);						// 设置字体样式
	settextcolor(RGB(75, 92, 196));
	outtextxy(20, 330, _T("操作说明"));
	outtextxy(20, 350, _T("玩家一"));
	outtextxy(20, 370, _T("W：旋转方块"));
	outtextxy(20, 390, _T("A：左移方块"));
	outtextxy(20, 410, _T("D：右移方块"));
	outtextxy(20, 430, _T("S：下移方块"));
	outtextxy(20, 480, _T("玩家二"));
	outtextxy(20, 500, _T("上：旋转方块"));
	outtextxy(20, 520, _T("左：左移方块"));
	outtextxy(20, 540, _T("右：右移方块"));
	outtextxy(20, 560, _T("下：下移方块"));

	//游戏界面文字
	outtextxy(580, 25, _T("下一个方块"));
	outtextxy(1080, 25, _T("下一个方块"));

	//设置坐标原点
	setorigin(x, y);

	// 开始新游戏
	NewGame();
}

// 退出游戏
void Drawing::Quit()
{
	closegraph();
	exit(0);
}

// 开始新游戏
void Drawing::NewGame()
{
	// 清空游戏区
	setfillcolor(BLACK);
	solidrectangle(-3, -3, WIDTH * UNIT + 2, HEIGHT * UNIT + 2);
	solidrectangle(497, -3, WIDTH * UNIT + 502, HEIGHT * UNIT + 2);
	setlinecolor(RGB(163, 226, 197));
	rectangle(-4, -4, 344, 623);
	rectangle(496, -4, 844, 623);
	ZeroMemory(g_World, WIDTH * HEIGHT);

	// 生成下一个方块
	g_NextBlock.id = rand() % 7;
	g_NextBlock.dir = rand() % 4;
	g_NextBlock.x = WIDTH + 2;
	g_NextBlock.y = HEIGHT - 4;

	// 获取新方块
	Square A;
	A.NewBlock();
}

// 结束游戏
void Drawing::GameOver()
{
	HWND wnd = GetHWnd();
	if (MessageBox(wnd, _T("游戏结束。\n您想重新来一局吗？"), _T("游戏结束"), MB_YESNO | MB_ICONQUESTION) == IDYES)
		NewGame();
	else
		Quit();
}

// 获取控制命令
DWORD m_oldtime;
CMD Player::GetCmd()
{
	// 获取控制值
	while (true)
	{
		// 如果超时，自动下落一格
		DWORD newtime = GetTickCount();
		if (newtime - m_oldtime >= 500)
		{
			m_oldtime = newtime;
			return CMD_DOWN;
		}

		// 如果有按键，返回按键对应的功能
		if (_kbhit())
		{
			switch (_getch())
			{
			case 'w':
			case 'W':	return CMD_ROTATE;
			case 'a':
			case 'A':	return CMD_LEFT;
			case 'd':
			case 'D':	return CMD_RIGHT;
			case 's':
			case 'S':	return CMD_DOWN;
			case 27:	return CMD_QUIT;
			case ' ':	return CMD_SINK;
			case 0:
			case 0xE0:
				switch (_getch())
				{
				case 72:	return CMD_ROTATE;
				case 75:	return CMD_LEFT;
				case 77:	return CMD_RIGHT;
				case 80:	return CMD_DOWN;
				}
			}
		}
		// 延时 (降低 CPU 占用率)
		Sleep(20);
	}
}

// 分发控制命令
void Player::DispatchCmd(CMD _cmd)
{
	Square B;
	switch (_cmd)
	{
	case CMD_ROTATE:	B.OnRotate();	break;
	case CMD_LEFT:		B.OnLeft();		break;
	case CMD_RIGHT:		B.OnRight();	break;
	case CMD_DOWN:		B.OnDown();		break;
	case CMD_SINK:		B.OnSink();		break;
	case CMD_QUIT:		break;
	}
}

// 生成新的方块
void Square::NewBlock()
{
	g_CurBlock.id = g_NextBlock.id, g_NextBlock.id = rand() % 7;
	g_CurBlock.dir = g_NextBlock.dir, g_NextBlock.dir = rand() % 4;
	DrawBlock(g_NextBlock, CLEAR);
	g_CurBlock.x = (WIDTH - 4) / 2;
	g_CurBlock.y = HEIGHT + 1;

	// 下移新方块直到有局部显示
	WORD c = g_Blocks[g_CurBlock.id].dir[g_CurBlock.dir];
	while ((c & 0xF) == 0)
	{
		g_CurBlock.y--;
		c >>= 4;
	}

	// 绘制新方块
	DrawBlock(g_CurBlock);

	// 绘制下一个方块
	setfillcolor(BLACK);
	solidrectangle((WIDTH + 1) * UNIT + 10, 50, (WIDTH + 7) * UNIT - 1, 160);
	solidrectangle((WIDTH + 1) * UNIT + 510, 50, (WIDTH + 7) * UNIT + 499, 160);
	DrawBlock(g_NextBlock);

	// 设置计时器，用于判断自动下落
	m_oldtime = GetTickCount();
}

// 画单元方块
void Square::DrawUnit(int x, int y, COLORREF c, DRAW _draw)
{
	// 计算单元方块对应的屏幕坐标
	int left = x * UNIT;
	int top = (HEIGHT - y - 1) * UNIT;
	int right = (x + 1) * UNIT - 1;
	int bottom = (HEIGHT - y) * UNIT - 1;

	// 画单元方块
	switch (_draw)
	{
	case SHOW:
		// 画普通方块
		setfillcolor(c);
		setlinecolor(LIGHTGRAY);
		fillrectangle(left + 2, top + 2, right - 2, bottom - 2);
		break;

	case FIX:
		// 画固定的方块
		setlinecolor(RGB(163, 226, 197));
		rectangle(-4, -4, 344, 623);
		rectangle(496, -4, 844, 623);
		setlinecolor(LIGHTGRAY);
		setfillcolor(RGB(GetRValue(c) * 2 / 3, GetGValue(c) * 2 / 3, GetBValue(c) * 2 / 3));
		fillrectangle(left + 1, top + 1, right - 1, bottom - 1);
		break;

	case CLEAR:
		// 擦除方块
		setfillcolor(BLACK);
		solidrectangle(x * UNIT, (HEIGHT - y - 1) * UNIT, (x + 1) * UNIT - 1, (HEIGHT - y) * UNIT - 1);
		break;
	}
}


// 画方块
void Square::DrawBlock(BLOCKINFO _block, DRAW _draw)
{
	WORD b = g_Blocks[_block.id].dir[_block.dir];
	int x, y;

	for (int i = 0; i < 16; i++, b <<= 1)
		if (b & 0x8000)
		{
			x = _block.x + i % 4;
			y = _block.y - i / 4;
			if (y < HEIGHT)
				DrawUnit(x, y, g_Blocks[_block.id].color, _draw);
		}
}


// 检测指定方块是否可以放下
bool Square::CheckBlock(BLOCKINFO _block)
{
	WORD b = g_Blocks[_block.id].dir[_block.dir];
	int x, y;

	for (int i = 0; i < 16; i++, b <<= 1)
		if (b & 0x8000)
		{
			x = _block.x + i % 4;
			y = _block.y - i / 4;
			if ((x < 0) || (x >= WIDTH) || (y < 0))
				return false;

			if ((y < HEIGHT) && (g_World[x][y]))
				return false;
		}

	return true;
}


// 旋转方块
void Square::OnRotate()
{
	// 获取可以旋转的 x 偏移量
	int dx;
	BLOCKINFO tmp = g_CurBlock;
	tmp.dir++;					if (CheckBlock(tmp)) { dx = 0;		goto rotate; }
	tmp.x = g_CurBlock.x - 1;	if (CheckBlock(tmp)) { dx = -1;	goto rotate; }
	tmp.x = g_CurBlock.x + 1;	if (CheckBlock(tmp)) { dx = 1;		goto rotate; }
	tmp.x = g_CurBlock.x - 2;	if (CheckBlock(tmp)) { dx = -2;	goto rotate; }
	tmp.x = g_CurBlock.x + 2;	if (CheckBlock(tmp)) { dx = 2;		goto rotate; }
	return;

rotate:
	// 旋转
	DrawBlock(g_CurBlock, CLEAR);
	g_CurBlock.dir++;
	g_CurBlock.x += dx;
	DrawBlock(g_CurBlock);
}


// 左移方块
void Square::OnLeft()
{
	BLOCKINFO tmp = g_CurBlock;
	tmp.x--;
	if (CheckBlock(tmp))
	{
		DrawBlock(g_CurBlock, CLEAR);
		g_CurBlock.x--;
		DrawBlock(g_CurBlock);
	}
}


// 右移方块
void Square::OnRight()
{
	BLOCKINFO tmp = g_CurBlock;
	tmp.x++;
	if (CheckBlock(tmp))
	{
		DrawBlock(g_CurBlock, CLEAR);
		g_CurBlock.x++;
		DrawBlock(g_CurBlock);
	}
}


// 下移方块
void Square::OnDown()
{
	BLOCKINFO tmp = g_CurBlock;
	tmp.y--;
	if (CheckBlock(tmp))
	{
		DrawBlock(g_CurBlock, CLEAR);
		g_CurBlock.y--;
		DrawBlock(g_CurBlock);
	}
	else
		OnSink();	// 不可下移时，执行“沉底方块”操作
}


// 沉底方块
void Square::OnSink()
{
	int i, x, y;

	// 连续下移方块
	DrawBlock(g_CurBlock, CLEAR);
	BLOCKINFO tmp = g_CurBlock;
	tmp.y--;
	while (CheckBlock(tmp))
	{
		g_CurBlock.y--;
		tmp.y--;
	}
	DrawBlock(g_CurBlock, FIX);

	// 固定方块在游戏区
	WORD b = g_Blocks[g_CurBlock.id].dir[g_CurBlock.dir];
	for (i = 0; i < 16; i++, b <<= 1)
		if (b & 0x8000)
		{
			if (g_CurBlock.y - i / 4 >= HEIGHT)
			{	// 如果方块的固定位置超出高度，结束游戏
				Drawing C(0, 0);
				C.GameOver();
				return;
			}
			else
				g_World[g_CurBlock.x + i % 4][g_CurBlock.y - i / 4] = 1;
		}

	// 检查是否需要消掉行，并标记
	BYTE remove = 0;	// 低 4 位用来标记方块涉及的 4 行是否有消除行为
	for (y = g_CurBlock.y; y >= max(g_CurBlock.y - 3, 0); y--)
	{
		i = 0;
		for (x = 0; x < WIDTH; x++)
			if (g_World[x][y] == 1)
				i++;

		if (i == WIDTH)
		{
			remove |= (1 << (g_CurBlock.y - y));
			setfillcolor(LIGHTGREEN);
			setlinecolor(LIGHTGREEN);
			setfillstyle(BS_HATCHED, HS_DIAGCROSS);
			solidrectangle(-3, (HEIGHT - y - 1) * UNIT + UNIT / 2 - 8, WIDTH * UNIT + 2, (HEIGHT - y - 1) * UNIT + UNIT / 2 + 8);
			setfillstyle(BS_SOLID);
		}
	}

	if (remove)	// 如果产生整行消除
	{
		// 延时 300 毫秒
		Sleep(300);

		// 擦掉刚才标记的行
		IMAGE img;
		for (i = 0; i < 4; i++, remove >>= 1)
		{
			if (remove & 1)
			{
				for (y = g_CurBlock.y - i + 1; y < HEIGHT; y++)
					for (x = 0; x < WIDTH; x++)
					{
						g_World[x][y - 1] = g_World[x][y];
						g_World[x][y] = 0;
					}

				getimage(&img, 0, 0, WIDTH * UNIT, (HEIGHT - (g_CurBlock.y - i + 1)) * UNIT);
				putimage(0, UNIT, &img);
			}
		}
	}

	// 产生新方块
	NewBlock();
}
